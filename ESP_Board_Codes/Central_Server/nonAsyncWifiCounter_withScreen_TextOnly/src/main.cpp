#if defined(ESP8266)
#include <ESP8266WiFi.h>
// #include <ESP8266WebServer.h>
#include <ESPAsyncTCP.h>

#elif defined(ESP32)
#include <WiFi.h>
#include <AsyncTCP.h>
#endif

#include <WebSocketsServer.h>
#include <WiFiManager.h>
#include <ArduinoJson.h>

#include <Adafruit_GFX.h>
#include <Fonts/FreeSans9pt7b.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32

const int playerCount = 2;
// 'favicon', 128x64px
static const unsigned char PROGMEM logo_bmp[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x07, 0xe0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x87, 0xe0, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0x83, 0xc1, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0x83, 0xc1, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1e, 0x03, 0xc0, 0x38, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x08, 0x01, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x10, 0x01, 0x80, 0x08, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x78, 0x00, 0x00, 0x1c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0x00, 0x00, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf9, 0xfd, 0xf8, 0x00, 0x00, 0x1f, 0xbf, 0x9f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xfc, 0x10, 0x00, 0x3f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x01, 0xf9, 0xfc, 0xf8, 0x1f, 0x3f, 0x9f, 0x80, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x80, 0xf1, 0xfd, 0xf8, 0x1f, 0xbf, 0x8f, 0x01, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x80, 0xe0, 0xf9, 0xf8, 0x1f, 0x8f, 0x07, 0x01, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xe1, 0xfc, 0x1f, 0x07, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x80, 0x40, 0xfc, 0x1f, 0x02, 0x01, 0x03, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xfe, 0x0f, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x80, 0x70, 0x0e, 0x01, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc0, 0x70, 0x0e, 0x03, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc1, 0xe0, 0x07, 0x83, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xe3, 0xe0, 0x87, 0xc7, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe1, 0x87, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xc1, 0x83, 0xf7, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xc3, 0xc3, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0x83, 0xc1, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0x87, 0xe1, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x07, 0xe0, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0x07, 0xe0, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0x0f, 0xf0, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const char *MESSAGE_CONFIGURE_WIFI[4] = {"Scan QR", "to setup", "WiFi", ""};
const char *MESSAGE_OPEN_WEBAPP[4] = {"Scan QR", "to open", "race manager", "webapp "};

const char *SLOT_STATUS = "slot_status";
const char *MILLIS = "millis";
const char *THRESHOLD = "threshold";

WebSocketsServer webSocket(80, "*");
String chipModel;
unsigned long startTime;
int threshold = 100;

const char *wifiPassword = "admin1234";
String wifiName;

const int cursor_start_y = 15;
const int cursor_start_x = 0;
const int font_height = 15;

void setupScreen();
void setupWebSocket();
void setupWifi();
void configModeCallback(WiFiManager *myWiFiManager);
void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length);
void handleWebSocketMessage(uint8_t num, uint8_t *payload, size_t length);
void notifyClients(String sensorReadings);
StaticJsonDocument<96> getJsonSensorData();
String getJsonInfo();
void resetScreen();
void drawTexts(const char *lines[]);

void setup()
{
  Serial.begin(115200);
  setupScreen();

#if defined(ESP8266)
  chipModel = "ESP8266";
#else // ESP32
  chipModel = "ESP32";
#endif

  Serial.println(chipModel);
  setupWifi();
  setupWebSocket();
}

void setupScreen()
{
  Wire.begin(14, 12);
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ; // Don't proceed, loop forever
  }
  display.setTextColor(1, 0);
  display.clearDisplay();
  display.setFont(&FreeSans9pt7b);
  display.drawBitmap(0, 0, logo_bmp, SCREEN_WIDTH, SCREEN_HEIGHT, 1);
  display.display();
}

void setupWebSocket()
{
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  Serial.println("Websocket started");
}

void setupWifi()
{
  bool res;

  long randNumber = random(100);
  wifiName = "RaceM-" + String(randNumber); // + String(randNumber);
  WiFiManager wm;
  // wm.setSTAStaticIPConfig(IPAddress(192,168,1,99), IPAddress(192,168,1,1), IPAddress(255,255,255,0));
  wm.setAPCallback(configModeCallback);
  res = wm.autoConnect(wifiName.c_str(), wifiPassword);

  if (!res)
  {
    Serial.println("Failed to connect");
    ESP.restart();
  }
  else
  {
    Serial.println("Connected");
    Serial.println(WiFi.localIP());
  }
  resetScreen();
  display.setCursor(cursor_start_x, cursor_start_y);
  display.println(F("IP address: "));
  display.setCursor(cursor_start_x, cursor_start_y + font_height);
  display.println(WiFi.localIP());
  display.display();
}

void configModeCallback(WiFiManager *myWiFiManager)
{
  Serial.println("Entered config mode");
  // Format the QR code string
  char qrCodeString[100]; // Adjust the size as needed
  snprintf(qrCodeString, sizeof(qrCodeString), "WIFI:S:%s;P:%s;;", wifiName, wifiPassword);
  const char *wifiInfo[4];
  wifiInfo[0] = "Wifi Name: ";
  wifiInfo[1] = wifiName.c_str();
  wifiInfo[2] = "Password: ";
  wifiInfo[3] = wifiPassword;
  // drawQrCode(qrCodeString, MESSAGE_CONFIGURE_WIFI);
  drawTexts(wifiInfo);
  Serial.println(WiFi.softAPIP());
  Serial.println(myWiFiManager->getConfigPortalSSID());
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length)
{
  switch (type)
  {
  case WStype_DISCONNECTED:
    Serial.printf("[%u] Disconnected!\n", num);
    break;
  case WStype_CONNECTED:
    Serial.printf("[%u] Connected from %s\n", num, webSocket.remoteIP(num).toString().c_str());
    break;
  case WStype_TEXT:
    handleWebSocketMessage(num, payload, length);
    break;
  }
}

void handleWebSocketMessage(uint8_t num, uint8_t *payload, size_t length)
{
  String message = (char *)payload;
  if (message == "Ping")
  {
    Serial.println(F("Sending Pong"));
    webSocket.sendTXT(num, "Pong");
    return;
  }
  StaticJsonDocument<96> doc;
  DeserializationError error = deserializeJson(doc, message);
  if (error)
  {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    return;
  }

  threshold = doc[THRESHOLD];
  Serial.print("New threshold: " + String(threshold));
}

void notifyClients(String sensorReadings)
{
  webSocket.broadcastTXT(sensorReadings);
}

StaticJsonDocument<96> previousReading;
bool isLongScreen;
void loop()
{
  unsigned long currentTime = millis();
  unsigned long elapsedTime = currentTime - startTime;

  if (elapsedTime >= 1000)
  {
    StaticJsonDocument<96> newReading;
    newReading["millis"] = String(millis());
    JsonArray slot_status = newReading.createNestedArray("slot_status");
    slot_status.add(true);
    slot_status.add(false);

    for (int i = 0; i < playerCount; i++)
    {
      if ((bool)newReading[SLOT_STATUS][i] != (bool)previousReading[SLOT_STATUS][i])
      {

        break;
      }
    }

    String result = "";
    serializeJson(newReading, result);
    // move up in production
    notifyClients(result);

    previousReading = newReading;
    Serial.println(F("One second has passed!"));
    Serial.println(currentTime);

    startTime = currentTime;
  }
  if (!isLongScreen && currentTime > 300000)
  {
    isLongScreen = true;
    display.clearDisplay();
  }
  webSocket.loop();
}

StaticJsonDocument<96> getJsonSensorData()
{
  StaticJsonDocument<96> doc;
  doc["millis"] = String(millis());
  JsonArray slot_status = doc.createNestedArray("slot_status");
  slot_status.add(true);
  slot_status.add(false);

  return doc;
}

String getJsonInfo()
{
  StaticJsonDocument<96> doc;
  doc["track_type"] = "Analog";
  doc["sensor_type"] = "Hall effect";
  doc["chip_Model"] = chipModel;

  String result = "";
  serializeJson(doc, result);
  return result;
}

void resetScreen()
{
  Serial.println(F("Start text drawing"));
  display.clearDisplay();
}

void drawTexts(const char *lines[])
{
  resetScreen();
  for (int i = 0; i < 4; i++)
  {
    display.setCursor(cursor_start_x, cursor_start_y + font_height * i);
    Serial.println(lines[i]);
    display.println(lines[i]);
  }
  display.display();
  Serial.println(F("Finish text drawing"));
}